---

- name: read the iqn from the host
  command: awk -F= '{if ($1 != "#") { if ($1 ~ /InitiatorName/) print $2}}' /etc/iscsi/initiatorname.iscsi
  register: iscsi_iqn

- name: generate authentication token
  uri:
    url: "{{ act_api_login }}"
    validate_certs: no  
  register: logintoken

- name: check whether the entry exisit
  uri:
    url: "{{ act_api_info }}/lshost?filtervalue=hostname={{ inventory_hostname }}&alternateip={{ ansible_host }}&sessionid={{ logintoken.json.sessionid }}"
    validate_certs: no  
  register: lshost    

- name: create actifio host entry
  uri:
    url: "{{ act_api_task }}/mkhost?{{ mkhost_hostname }}&{{ mkhost_friendly }}&{{ mkhost_ip }}&{{ mkhost_iscsi }}&{{ mkhost_port }}&sessionid={{ logintoken.json.sessionid }}"
    validate_certs: no  
    method: POST
  vars:
    mkhost_hostname: "hostname={{ inventory_hostname }}"
    mkhost_friendly: "friendlypath={{ inventory_hostname }}"
    mkhost_ip: "alternateip={{ ansible_host }}"
    mkhost_port: "port=5106"
    mkhost_iscsi: "iscsiname={{ iscsi_iqn.stdout }}"
  register: actmkhost
  when: lshost.json.result.0 is not defined 

- name: update actifio host entry
  uri:
    url: "{{ act_api_task }}/chhost?{{ chhost_iscsi }}&sessionid={{ logintoken.json.sessionid }}&argument={{ lshost.json.result[0].id }}"
    validate_certs: no  
    method: POST
  vars:
    chhost_iscsi: "iscsiname={{ iscsi_iqn.stdout }}"
  register: actchhost
  when: lshost.json.result.0 is defined

- name: check whether the entry exisit
  uri:
    url: "{{ act_api_info }}/lshost?filtervalue=hostname={{ inventory_hostname }}&alternateip={{ ansible_host }}&sessionid={{ logintoken.json.sessionid }}"
    validate_certs: no  
  register: lshost    

- name: test iscsi connection
  uri:
    url: "{{ act_api_task }}/iscsitest?host={{ lshost.json.result[0].id }}&iscsiports={{ iscsi_iqn.stdout }}&sessionid={{ logintoken.json.sessionid }}"
    validate_certs: no
    timeout: 300
    method: POST
  register: iscsitest
